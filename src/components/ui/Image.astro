---
import type { ImageMetadata } from 'astro';
import { generateSrcSet, getSrcSet, getAspectRatio } from '@/lib/images';

export interface Props {
  src: ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  sizes?: string;
}

const props = Astro.props;

const width = props.width ?? props.src.width;
const height = props.height ?? props.src.height;
const loading = props.loading ?? 'lazy';
const decoding = props.decoding ?? 'async';
const sizes = props.sizes ?? '(min-width: 1024px) 1024px, 100vw';

const aspectRatio = getAspectRatio(width, height);
const srcSets = await generateSrcSet(props.src);
---

<picture>
  {srcSets && Object.entries(srcSets).map(([format, images]) => (
    <source
      type={`image/${format}`}
      srcset={getSrcSet(images)}
      sizes={sizes}
    />
  ))}
  <img
    src={props.src.src}
    alt={props.alt}
    width={width}
    height={height}
    loading={loading}
    decoding={decoding}
    class={props.class}
    style={`aspect-ratio: ${aspectRatio}`}
  />
</picture> 